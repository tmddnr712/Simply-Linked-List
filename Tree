class Node:
  
  def __init__(self, data):
    self.data = data
    self.children = [ ]
    
  def get_data(self):
    return self.data
  
  def add_child(self, child):
    self.children.append(child)
    
  def get_children(self):
    return self.children
      
class Tree:
  
  def __init__(self):
    self.root = None
    
  def get_root(self):
    return self.root
  
  def set_root(self, root):
    self.root = root
    
  def print_tree(self):
    self.print_node(self.root, 0)    
  
  def print_node(self, node, depth):
    msg = ""
    if node is not None:
      for i in range(0, depth):
        msg += "  "
      msg += node.get_data()
      print(msg)
      
      children = node.get_children()
      for child in children:
        self.print_node(child, depth+1)
      
    
tree = Tree()

node_a = Node("A")
node_b = Node("B")
node_c = Node("C")
node_d = Node("D")
node_e = Node("E")
node_f = Node("F")
node_g = Node("G")
node_h = Node("H")
node_i = Node("I")
node_j = Node("J")
node_k = Node("K")
node_l = Node("L")
node_m = Node("M")
node_n = Node("N")
node_o = Node("O")
node_p = Node("P")

tree.set_root(node_a)

node_a.add_child(node_b)
node_a.add_child(node_c)
node_a.add_child(node_d)

node_b.add_child(node_e)
node_b.add_child(node_f)
node_b.add_child(node_g)

node_c.add_child(node_h)
node_c.add_child(node_i)

node_d.add_child(node_j)

node_e.add_child(node_k)
node_e.add_child(node_l)

node_g.add_child(node_m)

node_h.add_child(node_n)

node_j.add_child(node_o)
node_j.add_child(node_p)


tree.print_tree()
