class Node:

  def __init__(self, data):
    self.data = data
    self.prev = None
    self.next = None

  def set_prev(self, prev):
    self.prev = prev

  def set_next(self, next):
    self.next = next

  def get_data(self):
    return self.data

  def get_prev(self):
    return self.prev

  def get_next(self):
    return self.next

class Doubly_linked_list:

  def __init__(self):
    self.header = None
    self.tail = None
    self.size = 0

  def print_list(self):
    print(">> current list")
    node = self.header
    while node is not None:
      print(node.get_data())
      node = node.get_next()
    print(">>>>>>>>>>>>>>>>")

  def append(self, data):
    new_node = Node(data)
    self.size += 1
    if self.header is None:
      self.header = new_node
    else:
      self.tail.set_next(new_node)
      new_node.set_prev(self.tail)
    self.tail = new_node

  def search(self, data):
    node = self.header
    while node is not None:
      if node.get_data() == data:
        return node
      node = node.get_next()
    return node

  def get_near_by(self, data, scope):
    list = []

    center = self.search(data)

    if center is not None:
      count = 0
      node = center.get_prev()
      while(node is not None and count < scope):
        list.append(node)
        count += 1
        node = node.get_prev()

      count = 0
      node = center.get_next()
      while(node is not None and count < scope):
        list.append(node)
        count += 1
        node = node.get_next()
    return list


dll = Doubly_linked_list()
dll.append("Apple")
dll.append("Kiwi")
dll.append("Banana")
dll.append("Melon")
dll.append("Orange")
dll.append("Blackberry")

list = dll.get_near_by("Banana", 2)
for node in list:
  print(node.get_data())
print("============================")
list = dll.get_near_by("Apple", 3)
for node in list:
  print(node.get_data())
